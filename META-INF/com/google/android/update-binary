#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='/system/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "- Mounting $1 to $2"
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ ! -z "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

# custom functions

set_separate_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $6 $8
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $4 $5 $7 $9
  done
}

install_package() {
  # Install/update Android package $APKNAME $PACKAGENAME
  if [ -f "$MODPATH/system/app/${1%.apk}/$1" ]; then
    ui_print "! ${1%.apk} is installed as system app"
    rm -rf /data/app/${2}-*
    # rm -rf /data/data/${2}

  elif [ -f "$MODPATH/system/priv-app/${1%.apk}/$1" ]; then
    ui_print "! ${1%.apk} is installed as system priv-app"
    rm -rf /data/app/${2}-*
    # rm -rf /data/data/${2}

  elif [ -f "$INSTALLER/common/$1" ]; then
    ui_print "- Installing ${1%.apk} into /data"
    APKPATH="$2"-1
    for i in `ls /data/app | grep "$2"-`; do
      if [ `cat /data/system/packages.xml | grep $i >/dev/null 2>&1; echo $?` -eq 0 ]; then
        APKPATH=$i
        break;
      fi
    done
    rm -rf /data/app/"$2"-*

    ui_print "  target path: /data/app/$APKPATH"

    mkdir -p /data/app/$APKPATH
    chown 1000.1000 /data/app/$APKPATH
    chmod 0755 /data/app/$APKPATH
    chcon u:object_r:apk_data_file:s0 /data/app/$APKPATH

    cp $INSTALLER/common/$1 /data/app/$APKPATH/base.apk
    chown 1000.1000 /data/app/$APKPATH/base.apk
    chmod 0644 /data/app/$APKPATH/base.apk
    chcon u:object_r:apk_data_file:s0 /data/app/$APKPATH/base.apk

    rm /data/$1 2>/dev/null

    # enable xposed module
    if [ ! -z "$3" -a "$3" == "xposed" ]; then
      enable_xposed_package "$1" "$2" "/data/app/$APKPATH/base.apk"
    fi

  else
    ui_print "! ${1%.apk} is not included, install it later by yourself"

  fi
}

enable_xposed_package(){
  # $1, apk name
  # $2, full package location in /data/app/*.*.*/base.apk
  if [ ! -d "/data/data/de.robv.android.xposed.installer" ]; then
    ui_print "  Remember to enable ${1%.apk} in Xposed Installer later"
  else
    XPOSEDMODULES="/data/data/de.robv.android.xposed.installer/conf/modules.list"
    XPOSEDENABLED="/data/data/de.robv.android.xposed.installer/conf/enabled_modules.list"
    XPOSEDENABLEDXML="/data/data/de.robv.android.xposed.installer/shared_prefs/enabled_modules.xml"

    if [ `cat $XPOSEDENABLED | grep "$2" >/dev/null 2>&1; echo $?` -ne 0 ]; then
      ui_print "  Enabling Xposed module ${1%.apk}"
      echo "$2" >> $XPOSEDENABLED
      if [ `cat $XPOSEDENABLEDXML | grep "$2" >/dev/null 2>&1; echo $?` -ne 0 ]; then
        if [ `cat $XPOSEDENABLEDXML | grep "<map>" >/dev/null 2>&1; echo $?` -eq 0 ]; then
          sed -i "/<\/map>/ i \    <int name=\"${2}\" value=\"1\" \/>" $XPOSEDENABLEDXML
        else
          sed -i "s/<map \/>/<map>\n\    <int name=\"${2}\" value=\"1\" \/>\n<\/map>/" $XPOSEDENABLEDXML
        fi
      fi
    fi

    if [ `cat $XPOSEDMODULES | grep "$3" >/dev/null 2>&1; echo $?` -ne 0 ]; then
      echo "$3" >> $XPOSEDMODULES
    fi
  fi
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

# This path should work in any cases
TMPDIR=/dev/tmp

MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID

# FILE LOCATIONS

if [ -d "/system/system" ]; then
  SYS=/system/system
else
  SYS=/system
fi

if [ ! -d "$SYS/vendor" ] || [ -L "$SYS/vendor" ]; then
  VEN=/vendor
elif [ -d "$SYS/vendor" ] || [ -L "/vendor" ]; then
  VEN=$SYS/vendor
fi

if [ -e "$VEN/build.prop" ] && [ ! -e "$SYS/build.prop" ]; then
  BUILDPROP=$VEN/build.prop
elif [ -e "$SYS/build.prop" ] && [ ! -e "$VEN/build.prop" ]; then
  BUILDPROP=$SYS/build.prop
elif [ -e "$SYS/build.prop" ] && [ -e "$VEN/build.prop" ]; then
  if [ $(wc -c < "$SYS/build.prop") -ge $(wc -c < "$VEN/build.prop") ]; then
    BUILDPROP=$SYS/build.prop
  else
    BUILDPROP=$VEN/build.prop
  fi
fi

if [ -d "/sdcard0" ]; then
  SDCARD=/sdcard0
elif [ -d "/sdcard/0" ]; then
  SDCARD=/sdcard/0
else
  SDCARD=/sdcard
fi

MIRRDIR=""
if $BOOTMODE; then
  MIRRDIR="/dev/magisk/mirror"
fi

MIRRSYS="$MIRRDIR$SYS"

# unzip files into temperary folder $INSTALLER
rm -rf $INSTALLER
mkdir -p $INSTALLER
cd $INSTALLER
# unzip -o "$ZIP" common/* module.prop
unzip -o "$ZIP"

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
  ui_print "! Failed: /system could not be mounted!"
  exit 1
fi

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; fi;

PRODUCT=$(grep_prop ro.build.product $BUILDPROP)
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.device $BUILDPROP)
fi
if [ -z "$PRODUCT" ]; then
  PRODUCT=$(grep_prop ro.product.name $BUILDPROP)
fi

BRAND=$(grep_prop ro.product.brand $BUILDPROP)

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
ui_print "- Checking compatibility"
if [ "$API" -lt "21" ]; then
  ui_print "! Magisk ONLY supports Lollipop 5.0+ (SDK 21+)"
  exit 1
else
  ui_print "- Magisk supports SDK $API. Compatible."
fi

# LIBV4A=$INSTALLER/Supported/viper/libv4a_fx_jb_NEON.so
# if [ "$ARCH" = "x86" -o "$ARCH" = "x64" ]; then
#   LIBV4A=$INSTALLER/Supported/viper/libv4a_fx_jb_X86.so
# fi

IMG=
if is_mounted /data; then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/magisk.img" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required for this mod!"
    exit 1
  fi
else
  IMG=/cache/magisk.img
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

request_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- $IMG detected!"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${SIZE}M"
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

mount_image $IMG $MOUNTPATH
if ! is_mounted $MOUNTPATH; then
  ui_print "! $IMG mount failed... abort"
  exit 1
fi

# Cleaning conflicts in /data
ui_print "- Cleaning conflicts in /data"
# rm -rf /data/app/com.atmos-*
# rm -rf /data/data/com.atmos
# rm -rf /data/app/com.atmos.daxappUI-*
# rm -rf /data/data/com.atmos.daxappUI
rm -rf /data/app/${PACKAGENAME}-*
rm -rf $MODPATH

# Create mod paths
# empty folders will be deleted by magisk_mount.sh during boot
# mkdir -p $MODPATH
mkdir -p $MODPATH$SYS

# Cleaning conflicts in /magisk
if [ -n "$TESTREMOVAL" ]; then
  ui_print "- Cleaning conflicts in /magisk"
  for TARGET in $TESTREMOVAL; do
    for FILETYPE in d f l; do
      RESULT=$(find /magisk/* -name "${TARGET##/*/}" -type "$FILETYPE" 2>/dev/null | grep "$TARGET")
      if [ ! -z "$RESULT" ]; then
        for ITEM in $RESULT; do
          ui_print "  $ITEM"
          rm -rf "$ITEM"
        done
      fi
    done
  done

  for TARGET in $SPREADREMOVAL; do
    for FILETYPE in d f l; do
      RESULT=$(find /magisk/* -name "${TARGET}" -type "$FILETYPE" 2>/dev/null)
      if [ ! -z "$RESULT" ]; then
        for ITEM in $RESULT; do
          ui_print "  $ITEM"
          rm -rf "$ITEM"
          if [ -f "${ITEM%/*}/.replace" ]; then
            ui_print "  ${ITEM%/*}"
            rm -rf "${ITEM%/*}"
          fi
        done
      fi
    done
  done
fi

# Handle removal files after test
if [ -n "$TESTREMOVAL" ]; then
  ui_print "- Removing existing files systemlessly"
  for TARGET in $TESTREMOVAL; do
    if [ -d "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET/.replace"
    elif [ -f "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET"
    elif [ -L "$MIRRDIR$TARGET" ]; then
      ui_print "  $TARGET"
      mktouch "$MODPATH$TARGET"
    else
      :
    fi
  done
fi

# Copy files
ui_print "- Copying files"
# unzip -o "$ZIP" system/* -d $MODPATH
cp -af $INSTALLER/system/* $MODPATH$SYS
cp -af $INSTALLER/vendor/* $MODPATH$SYS/vendor 2>/dev/null
if ! $IS64BIT; then
  rm -rf $MODPATH$SYS/lib64 2>/dev/null
  rm -rf $MODPATH$SYS/vendor/lib64 2>/dev/null
fi

# Copy selected lib
# cp -af $LIBV4A $MODPATH/system/lib/soundfx/libv4a_fx_ics.so

# Install package
# install_package "$APKNAME" "$PACKAGENAME"

# build property database patch for MOD by resetprop, through a
# property file called "custom_build.prop" or any other name, default name system.prop
if $PROPFILE; then
  cp -af "$INSTALLER/common/$buildname" "$MODPATH/$buildname"
fi

# Handle separate vendor partition replacement is
# ONLY available on Magisk v10+. Below is no need anymore.
# if [ -d "$MODPATH/vendor" ]; then
#   cp -af $MODPATH/vendor /data/tmpvendor
#   rm -rf $MODPATH/vendor
#   cp -af /data/tmpvendor $MODPATH$SYS/vendor
#   rm -rf /data/tmpvendor
# fi

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
if $AUTOMOUNT; then
  mktouch $MODPATH/auto_mount
fi

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
if $POSTFSDATA; then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if $LATESTARTSERVICE; then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

ui_print "- Setting permissions"
set_permissions

ui_print "- Unmounting partitions"

umount $MOUNTPATH
losetup -d $LOOPDEVICE
rm -rf $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M...";
  resize2fs $IMG ${NEWDATASIZE}M;
fi

if ! $BOOTMODE; then
  umount /system
  umount /vendor 2>/dev/null
fi

ui_print "- Done"
exit 0
